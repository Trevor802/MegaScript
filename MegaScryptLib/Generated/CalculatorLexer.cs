//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Digit=3, Not=4, And=5, Or=6, Dot=7, Plus=8, Minus=9, Multiply=10, 
		Divide=11, Modulo=12, LeftParenthesis=13, RightParenthesis=14, Greater=15, 
		Less=16, GreaterEqual=17, LessEqual=18, Equal=19, NotEqual=20, WhiteSpaces=21;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "Digit", "Not", "And", "Or", "Dot", "Plus", "Minus", "Multiply", 
		"Divide", "Modulo", "LeftParenthesis", "RightParenthesis", "Greater", 
		"Less", "GreaterEqual", "LessEqual", "Equal", "NotEqual", "WhiteSpaces"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'false'", "'true'", null, "'!'", "'&&'", "'||'", "'.'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'('", "')'", "'>'", "'<'", "'>='", "'<='", 
		"'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Digit", "Not", "And", "Or", "Dot", "Plus", "Minus", 
		"Multiply", "Divide", "Modulo", "LeftParenthesis", "RightParenthesis", 
		"Greater", "Less", "GreaterEqual", "LessEqual", "Equal", "NotEqual", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x17', 'i', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x6', '\x16', 
		'\x64', '\n', '\x16', '\r', '\x16', '\xE', '\x16', '\x65', '\x3', '\x16', 
		'\x3', '\x16', '\x2', '\x2', '\x17', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', 
		'\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', '\x14', 
		'\'', '\x15', ')', '\x16', '+', '\x17', '\x3', '\x2', '\x4', '\x3', '\x2', 
		'\x32', ';', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 
		'i', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', 
		')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '-', '\x3', '\x2', '\x2', '\x2', '\x5', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\a', '\x38', '\x3', '\x2', '\x2', '\x2', '\t', ':', '\x3', '\x2', 
		'\x2', '\x2', '\v', '<', '\x3', '\x2', '\x2', '\x2', '\r', '?', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x42', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x44', '\x3', '\x2', '\x2', '\x2', '\x13', '\x46', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'H', '\x3', '\x2', '\x2', '\x2', '\x17', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'L', '\x3', '\x2', '\x2', '\x2', '\x1B', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', 'P', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'R', '\x3', '\x2', '\x2', '\x2', '!', 'T', '\x3', '\x2', '\x2', '\x2', 
		'#', 'V', '\x3', '\x2', '\x2', '\x2', '%', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\\', '\x3', '\x2', '\x2', '\x2', ')', '_', '\x3', '\x2', '\x2', 
		'\x2', '+', '\x63', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 'h', '\x2', 
		'\x2', '.', '/', '\a', '\x63', '\x2', '\x2', '/', '\x30', '\a', 'n', '\x2', 
		'\x2', '\x30', '\x31', '\a', 'u', '\x2', '\x2', '\x31', '\x32', '\a', 
		'g', '\x2', '\x2', '\x32', '\x4', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\a', 'v', '\x2', '\x2', '\x34', '\x35', '\a', 't', '\x2', '\x2', 
		'\x35', '\x36', '\a', 'w', '\x2', '\x2', '\x36', '\x37', '\a', 'g', '\x2', 
		'\x2', '\x37', '\x6', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\t', 
		'\x2', '\x2', '\x2', '\x39', '\b', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\a', '#', '\x2', '\x2', ';', '\n', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\a', '(', '\x2', '\x2', '=', '>', '\a', '(', '\x2', '\x2', '>', '\f', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '~', '\x2', '\x2', '@', '\x41', 
		'\a', '~', '\x2', '\x2', '\x41', '\xE', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x30', '\x2', '\x2', '\x43', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '-', '\x2', '\x2', '\x45', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\a', '/', '\x2', '\x2', 'G', '\x14', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', ',', '\x2', '\x2', 'I', '\x16', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\x31', '\x2', '\x2', 'K', 
		'\x18', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\'', '\x2', '\x2', 
		'M', '\x1A', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '*', '\x2', '\x2', 
		'O', '\x1C', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '+', '\x2', '\x2', 
		'Q', '\x1E', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '@', '\x2', '\x2', 
		'S', ' ', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '>', '\x2', '\x2', 
		'U', '\"', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '@', '\x2', '\x2', 
		'W', 'X', '\a', '?', '\x2', '\x2', 'X', '$', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\a', '>', '\x2', '\x2', 'Z', '[', '\a', '?', '\x2', '\x2', 
		'[', '&', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '?', '\x2', '\x2', 
		']', '^', '\a', '?', '\x2', '\x2', '^', '(', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '#', '\x2', '\x2', '`', '\x61', '\a', '?', '\x2', '\x2', 
		'\x61', '*', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\t', '\x3', 
		'\x2', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\b', '\x16', '\x2', '\x2', 'h', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x2', '\x65', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
