//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Number=12, True=13, False=14, Var=15, Null=16, Not=17, 
		Increment=18, Decrement=19, And=20, Or=21, Dot=22, Plus=23, Minus=24, 
		Multiply=25, Divide=26, Modulo=27, LeftParenthesis=28, RightParenthesis=29, 
		Greater=30, Less=31, GreaterEqual=32, LessEqual=33, Equal=34, NotEqual=35, 
		AddAss=36, MinusAss=37, MultiplyAss=38, DivideAss=39, String=40, Id=41, 
		WhiteSpaces=42;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_funcDeclaration = 4, RULE_varList = 5, RULE_fieldDeclaration = 6, 
		RULE_object = 7, RULE_assignment = 8, RULE_invocation = 9, RULE_paramList = 10, 
		RULE_ifStmt = 11, RULE_retStmt = 12, RULE_incrementExpr = 13, RULE_decrementExpr = 14, 
		RULE_expression = 15;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "declaration", "funcDeclaration", "varList", 
		"fieldDeclaration", "object", "assignment", "invocation", "paramList", 
		"ifStmt", "retStmt", "incrementExpr", "decrementExpr", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'function'", "','", "':'", "'if'", 
		"'else if'", "'else'", "'return'", null, "'true'", "'false'", "'var'", 
		"'null'", "'!'", "'++'", "'--'", "'&&'", "'||'", "'.'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'('", "')'", "'>'", "'<'", "'>='", "'<='", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Number", "True", "False", "Var", "Null", "Not", "Increment", "Decrement", 
		"And", "Or", "Dot", "Plus", "Minus", "Multiply", "Divide", "Modulo", "LeftParenthesis", 
		"RightParenthesis", "Greater", "Less", "GreaterEqual", "LessEqual", "Equal", 
		"NotEqual", "AddAss", "MinusAss", "MultiplyAss", "DivideAss", "String", 
		"Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__7) | (1L << T__10) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 32; statement();
					}
					break;
				case 2:
					{
					State = 33; block();
					}
					break;
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; Match(T__0);
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__10) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
					{
					{
					State = 40; statement();
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 46; Match(T__1);
				}
				break;
			case T__7:
			case T__10:
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public RetStmtContext retStmt() {
			return GetRuleContext<RetStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53; incrementExpr();
				State = 54; Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 56; decrementExpr();
				State = 57; Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59; invocation();
				State = 60; Match(T__2);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 62; retStmt();
				State = 63; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(Var);
			State = 68; Match(Id);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 69; Match(T__3);
				State = 70; expression(0);
				}
			}

			State = 73; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(T__4);
			State = 76; Match(LeftParenthesis);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 77; varList();
				}
			}

			State = 80; Match(RightParenthesis);
			State = 81; Match(T__0);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__10) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				{
				State = 82; statement();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		public ITerminalNode[] Var() { return GetTokens(CalculatorParser.Var); }
		public ITerminalNode Var(int i) {
			return GetToken(CalculatorParser.Var, i);
		}
		public ITerminalNode[] Id() { return GetTokens(CalculatorParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CalculatorParser.Id, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 10, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(Var);
			State = 91; Match(Id);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 92; Match(T__5);
				State = 93; Match(Var);
				State = 94; Match(Id);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(Id);
			State = 101; Match(T__6);
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 102; expression(0);
				}
				break;
			case 2:
				{
				State = 103; @object();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public FieldDeclarationContext[] fieldDeclaration() {
			return GetRuleContexts<FieldDeclarationContext>();
		}
		public FieldDeclarationContext fieldDeclaration(int i) {
			return GetRuleContext<FieldDeclarationContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_object);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__0);
			State = 112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 107; fieldDeclaration();
					State = 108; Match(T__5);
					}
					} 
				}
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 115; fieldDeclaration();
			State = 116; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AddAss() { return GetToken(CalculatorParser.AddAss, 0); }
		public ITerminalNode MinusAss() { return GetToken(CalculatorParser.MinusAss, 0); }
		public ITerminalNode MultiplyAss() { return GetToken(CalculatorParser.MultiplyAss, 0); }
		public ITerminalNode DivideAss() { return GetToken(CalculatorParser.DivideAss, 0); }
		public ITerminalNode[] Id() { return GetTokens(CalculatorParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CalculatorParser.Id, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(CalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(CalculatorParser.Dot, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 118; Match(Id);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 119; Match(Dot);
				State = 120; Match(Id);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 126;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << AddAss) | (1L << MinusAss) | (1L << MultiplyAss) | (1L << DivideAss))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 127; expression(0);
			State = 128; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode[] Id() { return GetTokens(CalculatorParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CalculatorParser.Id, i);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode[] Dot() { return GetTokens(CalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(CalculatorParser.Dot, i);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 18, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 130; Match(Id);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 131; Match(Dot);
				State = 132; Match(Id);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 138; Match(LeftParenthesis);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 139; paramList();
				}
			}

			State = 142; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 20, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; expression(0);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 145; Match(T__5);
				State = 146; expression(0);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(CalculatorParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(CalculatorParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(CalculatorParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(CalculatorParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__7);
			State = 153; Match(LeftParenthesis);
			State = 154; expression(0);
			State = 155; Match(RightParenthesis);
			State = 156; block();
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 157; Match(T__8);
					State = 158; Match(LeftParenthesis);
					State = 159; expression(0);
					State = 160; Match(RightParenthesis);
					State = 161; block();
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 168; Match(T__9);
				State = 169; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetStmtContext retStmt() {
		RetStmtContext _localctx = new RetStmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_retStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(T__10);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 173; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementExprContext : ParserRuleContext {
		public ITerminalNode Increment() { return GetToken(CalculatorParser.Increment, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public IncrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementExprContext incrementExpr() {
		IncrementExprContext _localctx = new IncrementExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_incrementExpr);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Increment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; Match(Increment);
				State = 177; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178; Match(Id);
				State = 179; Match(Increment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementExprContext : ParserRuleContext {
		public ITerminalNode Decrement() { return GetToken(CalculatorParser.Decrement, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public DecrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementExprContext decrementExpr() {
		DecrementExprContext _localctx = new DecrementExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_decrementExpr);
		try {
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decrement:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; Match(Decrement);
				State = 183; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; Match(Id);
				State = 185; Match(Decrement);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode String() { return GetToken(CalculatorParser.String, 0); }
		public ITerminalNode Null() { return GetToken(CalculatorParser.Null, 0); }
		public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public ITerminalNode Dot() { return GetToken(CalculatorParser.Dot, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 189; Match(Number);
				}
				break;
			case 2:
				{
				State = 190; Match(False);
				}
				break;
			case 3:
				{
				State = 191; Match(True);
				}
				break;
			case 4:
				{
				State = 192; Match(Id);
				}
				break;
			case 5:
				{
				State = 193; Match(String);
				}
				break;
			case 6:
				{
				State = 194; Match(Null);
				}
				break;
			case 7:
				{
				State = 195; funcDeclaration();
				}
				break;
			case 8:
				{
				State = 196; @object();
				}
				break;
			case 9:
				{
				State = 197; incrementExpr();
				}
				break;
			case 10:
				{
				State = 198; decrementExpr();
				}
				break;
			case 11:
				{
				State = 199; invocation();
				}
				break;
			case 12:
				{
				State = 200; Match(LeftParenthesis);
				State = 201; expression(0);
				State = 202; Match(RightParenthesis);
				}
				break;
			case 13:
				{
				State = 204;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Not) | (1L << Plus) | (1L << Minus))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 205; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 229;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 209; Match(Dot);
						State = 210; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 212;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 213; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 215;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 216; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 218;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 219; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 220;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 221;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 222; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 223;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 224; Match(And);
						State = 225; expression(3);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 227; Match(Or);
						State = 228; expression(2);
						}
						break;
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\xED', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '%', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '(', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', ',', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '/', 
		'\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x44', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'J', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Q', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'V', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'Y', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', '\x62', '\n', '\a', '\f', '\a', '\xE', '\a', '\x65', '\v', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'k', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', 'q', '\n', '\t', '\f', '\t', '\xE', '\t', 't', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '|', '\n', '\n', '\f', '\n', '\xE', '\n', '\x7F', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\x88', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\x8B', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x8F', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x96', '\n', '\f', '\f', '\f', '\xE', '\f', '\x99', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\xA6', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\xA9', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAD', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB1', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xB7', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xBD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xD1', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xE8', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xEB', '\v', '\x11', 
		'\x3', '\x11', '\x2', '\x3', ' ', '\x12', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\x2', '\b', '\x4', '\x2', '\x6', '\x6', '&', ')', '\x4', '\x2', 
		'\x13', '\x13', '\x19', '\x1A', '\x3', '\x2', '\x1B', '\x1D', '\x3', '\x2', 
		'\x19', '\x1A', '\x3', '\x2', ' ', '#', '\x3', '\x2', '$', '%', '\x2', 
		'\x108', '\x2', '&', '\x3', '\x2', '\x2', '\x2', '\x4', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x43', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\n', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\\', '\x3', '\x2', '\x2', '\x2', '\xE', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'l', '\x3', '\x2', '\x2', '\x2', '\x12', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x84', '\x3', '\x2', '\x2', '\x2', '\x16', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xAE', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xBC', '\x3', '\x2', '\x2', '\x2', ' ', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\"', '%', '\x5', '\x6', '\x4', '\x2', '#', 
		'%', '\x5', '\x4', '\x3', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', 
		'$', '#', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', 
		'&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', 
		'\x2', '\x2', ')', '-', '\a', '\x3', '\x2', '\x2', '*', ',', '\x5', '\x6', 
		'\x4', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x33', '\a', '\x4', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\x6', '\x4', '\x2', '\x32', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x44', '\x5', '\b', '\x5', '\x2', '\x35', 
		'\x44', '\x5', '\x12', '\n', '\x2', '\x36', '\x44', '\x5', '\x18', '\r', 
		'\x2', '\x37', '\x38', '\x5', '\x1C', '\xF', '\x2', '\x38', '\x39', '\a', 
		'\x5', '\x2', '\x2', '\x39', '\x44', '\x3', '\x2', '\x2', '\x2', ':', 
		';', '\x5', '\x1E', '\x10', '\x2', ';', '<', '\a', '\x5', '\x2', '\x2', 
		'<', '\x44', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x5', '\x14', '\v', 
		'\x2', '>', '?', '\a', '\x5', '\x2', '\x2', '?', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x5', '\x1A', '\xE', '\x2', '\x41', '\x42', 
		'\a', '\x5', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x34', '\x3', '\x2', '\x2', '\x2', '\x43', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x36', '\x3', '\x2', '\x2', '\x2', '\x43', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x43', ':', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\a', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x11', 
		'\x2', '\x2', '\x46', 'I', '\a', '+', '\x2', '\x2', 'G', 'H', '\a', '\x6', 
		'\x2', '\x2', 'H', 'J', '\x5', ' ', '\x11', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\a', '\x5', '\x2', '\x2', 'L', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\a', '\a', '\x2', '\x2', 'N', 'P', '\a', '\x1E', 
		'\x2', '\x2', 'O', 'Q', '\x5', '\f', '\a', '\x2', 'P', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', '\x1F', '\x2', '\x2', 'S', 'W', '\a', '\x3', 
		'\x2', '\x2', 'T', 'V', '\x5', '\x6', '\x4', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x4', 
		'\x2', '\x2', '[', '\v', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', 
		'\x11', '\x2', '\x2', ']', '\x63', '\a', '+', '\x2', '\x2', '^', '_', 
		'\a', '\b', '\x2', '\x2', '_', '`', '\a', '\x11', '\x2', '\x2', '`', '\x62', 
		'\a', '+', '\x2', '\x2', '\x61', '^', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '+', '\x2', '\x2', 'g', 'j', '\a', '\t', '\x2', '\x2', 'h', 
		'k', '\x5', ' ', '\x11', '\x2', 'i', 'k', '\x5', '\x10', '\t', '\x2', 
		'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', '\xF', '\x3', '\x2', '\x2', '\x2', 'l', 'r', '\a', '\x3', '\x2', 
		'\x2', 'm', 'n', '\x5', '\xE', '\b', '\x2', 'n', 'o', '\a', '\b', '\x2', 
		'\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\xE', '\b', 
		'\x2', 'v', 'w', '\a', '\x4', '\x2', '\x2', 'w', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'x', '}', '\a', '+', '\x2', '\x2', 'y', 'z', '\a', '\x18', 
		'\x2', '\x2', 'z', '|', '\a', '+', '\x2', '\x2', '{', 'y', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\t', '\x2', '\x2', '\x2', '\x81', '\x82', '\x5', ' ', '\x11', 
		'\x2', '\x82', '\x83', '\a', '\x5', '\x2', '\x2', '\x83', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x89', '\a', '+', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x18', '\x2', '\x2', '\x86', '\x88', '\a', '+', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\a', 
		'\x1E', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x16', '\f', '\x2', '\x8E', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x1F', '\x2', '\x2', '\x91', '\x15', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x97', '\x5', ' ', '\x11', '\x2', '\x93', '\x94', '\a', '\b', '\x2', 
		'\x2', '\x94', '\x96', '\x5', ' ', '\x11', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x17', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\n', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\x1E', '\x2', '\x2', '\x9C', '\x9D', '\x5', ' ', '\x11', 
		'\x2', '\x9D', '\x9E', '\a', '\x1F', '\x2', '\x2', '\x9E', '\xA7', '\x5', 
		'\x4', '\x3', '\x2', '\x9F', '\xA0', '\a', '\v', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x1E', '\x2', '\x2', '\xA1', '\xA2', '\x5', ' ', '\x11', 
		'\x2', '\xA2', '\xA3', '\a', '\x1F', '\x2', '\x2', '\xA3', '\xA4', '\x5', 
		'\x4', '\x3', '\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\f', '\x2', 
		'\x2', '\xAB', '\xAD', '\x5', '\x4', '\x3', '\x2', '\xAC', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\a', '\r', '\x2', 
		'\x2', '\xAF', '\xB1', '\x5', ' ', '\x11', '\x2', '\xB0', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\a', '\x14', '\x2', 
		'\x2', '\xB3', '\xB7', '\a', '+', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'+', '\x2', '\x2', '\xB5', '\xB7', '\a', '\x14', '\x2', '\x2', '\xB6', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', 
		'\x15', '\x2', '\x2', '\xB9', '\xBD', '\a', '+', '\x2', '\x2', '\xBA', 
		'\xBB', '\a', '+', '\x2', '\x2', '\xBB', '\xBD', '\a', '\x15', '\x2', 
		'\x2', '\xBC', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBF', '\b', '\x11', '\x1', '\x2', '\xBF', '\xD1', '\a', '\xE', '\x2', 
		'\x2', '\xC0', '\xD1', '\a', '\x10', '\x2', '\x2', '\xC1', '\xD1', '\a', 
		'\xF', '\x2', '\x2', '\xC2', '\xD1', '\a', '+', '\x2', '\x2', '\xC3', 
		'\xD1', '\a', '*', '\x2', '\x2', '\xC4', '\xD1', '\a', '\x12', '\x2', 
		'\x2', '\xC5', '\xD1', '\x5', '\n', '\x6', '\x2', '\xC6', '\xD1', '\x5', 
		'\x10', '\t', '\x2', '\xC7', '\xD1', '\x5', '\x1C', '\xF', '\x2', '\xC8', 
		'\xD1', '\x5', '\x1E', '\x10', '\x2', '\xC9', '\xD1', '\x5', '\x14', '\v', 
		'\x2', '\xCA', '\xCB', '\a', '\x1E', '\x2', '\x2', '\xCB', '\xCC', '\x5', 
		' ', '\x11', '\x2', '\xCC', '\xCD', '\a', '\x1F', '\x2', '\x2', '\xCD', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\t', '\x3', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', ' ', '\x11', '\t', '\xD0', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\f', '\n', '\x2', '\x2', '\xD3', '\xD4', '\a', 
		'\x18', '\x2', '\x2', '\xD4', '\xE8', '\x5', ' ', '\x11', '\v', '\xD5', 
		'\xD6', '\f', '\b', '\x2', '\x2', '\xD6', '\xD7', '\t', '\x4', '\x2', 
		'\x2', '\xD7', '\xE8', '\x5', ' ', '\x11', '\t', '\xD8', '\xD9', '\f', 
		'\a', '\x2', '\x2', '\xD9', '\xDA', '\t', '\x5', '\x2', '\x2', '\xDA', 
		'\xE8', '\x5', ' ', '\x11', '\b', '\xDB', '\xDC', '\f', '\x6', '\x2', 
		'\x2', '\xDC', '\xDD', '\t', '\x6', '\x2', '\x2', '\xDD', '\xE8', '\x5', 
		' ', '\x11', '\a', '\xDE', '\xDF', '\f', '\x5', '\x2', '\x2', '\xDF', 
		'\xE0', '\t', '\a', '\x2', '\x2', '\xE0', '\xE8', '\x5', ' ', '\x11', 
		'\x6', '\xE1', '\xE2', '\f', '\x4', '\x2', '\x2', '\xE2', '\xE3', '\a', 
		'\x16', '\x2', '\x2', '\xE3', '\xE8', '\x5', ' ', '\x11', '\x5', '\xE4', 
		'\xE5', '\f', '\x3', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x17', '\x2', 
		'\x2', '\xE6', '\xE8', '\x5', ' ', '\x11', '\x4', '\xE7', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'$', '&', '-', '\x32', '\x43', 'I', 'P', 'W', '\x63', 'j', 'r', '}', '\x89', 
		'\x8E', '\x97', '\xA7', '\xAC', '\xB0', '\xB6', '\xBC', '\xD0', '\xE7', 
		'\xE9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
