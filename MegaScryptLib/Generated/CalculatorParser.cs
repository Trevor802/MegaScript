//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Digit=1, True=2, False=3, Dot=4, Plus=5, Minus=6, Multiply=7, Divide=8, 
		LeftParenthesis=9, RightParenthesis=10, WhiteSpaces=11;
	public const int
		RULE_number = 0, RULE_boolean = 1, RULE_expression = 2;
	public static readonly string[] ruleNames = {
		"number", "boolean", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'true'", "'false'", "'.'", "'+'", "'-'", "'*'", "'/'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Digit", "True", "False", "Dot", "Plus", "Minus", "Multiply", "Divide", 
		"LeftParenthesis", "RightParenthesis", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode[] Digit() { return GetTokens(CalculatorParser.Digit); }
		public ITerminalNode Digit(int i) {
			return GetToken(CalculatorParser.Digit, i);
		}
		public ITerminalNode Dot() { return GetToken(CalculatorParser.Dot, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 0, RULE_number);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6; Match(Digit);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 9;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 18;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 11; Match(Dot);
				State = 15;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 12; Match(Digit);
						}
						} 
					}
					State = 17;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 2, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Digit:
				{
				State = 23; number();
				}
				break;
			case LeftParenthesis:
				{
				State = 24; Match(LeftParenthesis);
				State = 25; expression(0);
				State = 26; Match(RightParenthesis);
				}
				break;
			case Minus:
				{
				State = 28; Match(Minus);
				State = 29; expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 32;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 33;
						_la = TokenStream.LA(1);
						if ( !(_la==Multiply || _la==Divide) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34; expression(3);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37; expression(2);
						}
						break;
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '.', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x6', '\x2', '\n', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\v', '\x3', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x10', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', 
		'\x5', '\x2', '\x15', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '!', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', ')', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ',', 
		'\v', '\x4', '\x3', '\x4', '\x2', '\x3', '\x6', '\x5', '\x2', '\x4', '\x6', 
		'\x2', '\x5', '\x3', '\x2', '\x4', '\x5', '\x3', '\x2', '\t', '\n', '\x3', 
		'\x2', '\a', '\b', '\x2', '\x31', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x16', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\n', '\a', '\x3', '\x2', '\x2', '\t', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\v', '\x3', '\x2', '\x2', '\x2', '\v', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\f', '\x3', '\x2', '\x2', '\x2', '\f', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x11', '\a', '\x6', '\x2', '\x2', '\xE', 
		'\x10', '\a', '\x3', '\x2', '\x2', '\xF', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\r', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\t', '\x2', '\x2', '\x2', '\x17', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\b', '\x4', '\x1', '\x2', '\x19', '!', '\x5', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\v', '\x2', '\x2', '\x1B', 
		'\x1C', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1D', '\a', '\f', '\x2', 
		'\x2', '\x1D', '!', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\b', '\x2', '\x2', '\x1F', '!', '\x5', '\x6', '\x4', '\x5', ' ', '\x18', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1A', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '!', '*', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\f', '\x4', '\x2', '\x2', '#', '$', '\t', '\x3', '\x2', '\x2', 
		'$', ')', '\x5', '\x6', '\x4', '\x5', '%', '&', '\f', '\x3', '\x2', '\x2', 
		'&', '\'', '\t', '\x4', '\x2', '\x2', '\'', ')', '\x5', '\x6', '\x4', 
		'\x4', '(', '\"', '\x3', '\x2', '\x2', '\x2', '(', '%', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\a', '\x3', 
		'\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '\b', '\v', 
		'\x11', '\x14', ' ', '(', '*',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
