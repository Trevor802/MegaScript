//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, Number=8, True=9, 
		False=10, Var=11, Null=12, Not=13, Increment=14, Decrement=15, And=16, 
		Or=17, Dot=18, Plus=19, Minus=20, Multiply=21, Divide=22, Modulo=23, LeftParenthesis=24, 
		RightParenthesis=25, Greater=26, Less=27, GreaterEqual=28, LessEqual=29, 
		Equal=30, NotEqual=31, AddAss=32, MinusAss=33, MultiplyAss=34, DivideAss=35, 
		String=36, Id=37, WhiteSpaces=38;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_ifStmt = 5, RULE_incrementExpr = 6, RULE_decrementExpr = 7, 
		RULE_expression = 8;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "declaration", "assignment", "ifStmt", 
		"incrementExpr", "decrementExpr", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'if'", "'else if'", "'else'", null, 
		"'true'", "'false'", "'var'", "'null'", "'!'", "'++'", "'--'", "'&&'", 
		"'||'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "Number", "True", "False", 
		"Var", "Null", "Not", "Increment", "Decrement", "And", "Or", "Dot", "Plus", 
		"Minus", "Multiply", "Divide", "Modulo", "LeftParenthesis", "RightParenthesis", 
		"Greater", "Less", "GreaterEqual", "LessEqual", "Equal", "NotEqual", "AddAss", 
		"MinusAss", "MultiplyAss", "DivideAss", "String", "Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				State = 20;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 18; statement();
					}
					break;
				case 2:
					{
					State = 19; block();
					}
					break;
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25; Match(T__0);
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << Var) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
					{
					{
					State = 26; statement();
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 32; Match(T__1);
				}
				break;
			case T__4:
			case Var:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 45;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38; ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39; incrementExpr();
				State = 40; Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; decrementExpr();
				State = 43; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(Var);
			State = 48; Match(Id);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 49; Match(T__3);
				State = 50; expression(0);
				}
			}

			State = 53; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AddAss() { return GetToken(CalculatorParser.AddAss, 0); }
		public ITerminalNode MinusAss() { return GetToken(CalculatorParser.MinusAss, 0); }
		public ITerminalNode MultiplyAss() { return GetToken(CalculatorParser.MultiplyAss, 0); }
		public ITerminalNode DivideAss() { return GetToken(CalculatorParser.DivideAss, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(Id);
			State = 56;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << AddAss) | (1L << MinusAss) | (1L << MultiplyAss) | (1L << DivideAss))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 57; expression(0);
			State = 58; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(CalculatorParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(CalculatorParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(CalculatorParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(CalculatorParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(T__4);
			State = 61; Match(LeftParenthesis);
			State = 62; expression(0);
			State = 63; Match(RightParenthesis);
			State = 64; block();
			State = 73;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 65; Match(T__5);
					State = 66; Match(LeftParenthesis);
					State = 67; expression(0);
					State = 68; Match(RightParenthesis);
					State = 69; block();
					}
					} 
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 76; Match(T__6);
				State = 77; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementExprContext : ParserRuleContext {
		public ITerminalNode Increment() { return GetToken(CalculatorParser.Increment, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public IncrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementExprContext incrementExpr() {
		IncrementExprContext _localctx = new IncrementExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_incrementExpr);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Increment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(Increment);
				State = 81; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(Id);
				State = 83; Match(Increment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementExprContext : ParserRuleContext {
		public ITerminalNode Decrement() { return GetToken(CalculatorParser.Decrement, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public DecrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementExprContext decrementExpr() {
		DecrementExprContext _localctx = new DecrementExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_decrementExpr);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decrement:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(Decrement);
				State = 87; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; Match(Id);
				State = 89; Match(Decrement);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode String() { return GetToken(CalculatorParser.String, 0); }
		public ITerminalNode Null() { return GetToken(CalculatorParser.Null, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 93; Match(Number);
				}
				break;
			case 2:
				{
				State = 94; Match(False);
				}
				break;
			case 3:
				{
				State = 95; Match(True);
				}
				break;
			case 4:
				{
				State = 96; Match(Id);
				}
				break;
			case 5:
				{
				State = 97; Match(String);
				}
				break;
			case 6:
				{
				State = 98; Match(Null);
				}
				break;
			case 7:
				{
				State = 99; Match(LeftParenthesis);
				State = 100; expression(0);
				State = 101; Match(RightParenthesis);
				}
				break;
			case 8:
				{
				State = 103;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Not) | (1L << Plus) | (1L << Minus))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 104; expression(9);
				}
				break;
			case 9:
				{
				State = 105; incrementExpr();
				}
				break;
			case 10:
				{
				State = 106; decrementExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 127;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 109;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 110;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 111; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 113;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 114; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 116;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 117; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 119;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 120; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 122; Match(And);
						State = 123; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 125; Match(Or);
						State = 126; expression(2);
						}
						break;
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '(', '\x87', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x17', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1A', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '%', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x30', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x36', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'J', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'M', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'W', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', ']', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'n', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x82', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x85', '\v', '\n', '\x3', '\n', '\x2', 
		'\x3', '\x12', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x2', '\b', '\x4', '\x2', '\x6', '\x6', '\"', '%', '\x4', '\x2', 
		'\xF', '\xF', '\x15', '\x16', '\x3', '\x2', '\x17', '\x19', '\x3', '\x2', 
		'\x15', '\x16', '\x3', '\x2', '\x1C', '\x1F', '\x3', '\x2', ' ', '!', 
		'\x2', '\x99', '\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x4', '$', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '/', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\f', '>', '\x3', '\x2', '\x2', '\x2', '\xE', 'V', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\\', '\x3', '\x2', '\x2', '\x2', '\x12', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x17', '\x5', '\x6', '\x4', '\x2', '\x15', 
		'\x17', '\x5', '\x4', '\x3', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x16', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1F', '\a', 
		'\x3', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1D', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '%', '\a', '\x4', '\x2', '\x2', '#', 
		'%', '\x5', '\x6', '\x4', '\x2', '$', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'$', '#', '\x3', '\x2', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x30', '\x5', '\b', '\x5', '\x2', '\'', '\x30', '\x5', '\n', 
		'\x6', '\x2', '(', '\x30', '\x5', '\f', '\a', '\x2', ')', '*', '\x5', 
		'\xE', '\b', '\x2', '*', '+', '\a', '\x5', '\x2', '\x2', '+', '\x30', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\x5', '\x10', '\t', '\x2', '-', 
		'.', '\a', '\x5', '\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'/', '&', '\x3', '\x2', '\x2', '\x2', '/', '\'', '\x3', '\x2', '\x2', 
		'\x2', '/', '(', '\x3', '\x2', '\x2', '\x2', '/', ')', '\x3', '\x2', '\x2', 
		'\x2', '/', ',', '\x3', '\x2', '\x2', '\x2', '\x30', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\r', '\x2', '\x2', '\x32', '\x35', 
		'\a', '\'', '\x2', '\x2', '\x33', '\x34', '\a', '\x6', '\x2', '\x2', '\x34', 
		'\x36', '\x5', '\x12', '\n', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x5', '\x2', '\x2', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\'', '\x2', '\x2', 
		':', ';', '\t', '\x2', '\x2', '\x2', ';', '<', '\x5', '\x12', '\n', '\x2', 
		'<', '=', '\a', '\x5', '\x2', '\x2', '=', '\v', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\a', '\x2', '\x2', '?', '@', '\a', '\x1A', '\x2', '\x2', 
		'@', '\x41', '\x5', '\x12', '\n', '\x2', '\x41', '\x42', '\a', '\x1B', 
		'\x2', '\x2', '\x42', 'K', '\x5', '\x4', '\x3', '\x2', '\x43', '\x44', 
		'\a', '\b', '\x2', '\x2', '\x44', '\x45', '\a', '\x1A', '\x2', '\x2', 
		'\x45', '\x46', '\x5', '\x12', '\n', '\x2', '\x46', 'G', '\a', '\x1B', 
		'\x2', '\x2', 'G', 'H', '\x5', '\x4', '\x3', '\x2', 'H', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\x43', '\x3', '\x2', '\x2', '\x2', 'J', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'P', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'O', '\a', '\t', '\x2', '\x2', 'O', 'Q', '\x5', 
		'\x4', '\x3', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'S', 
		'\a', '\x10', '\x2', '\x2', 'S', 'W', '\a', '\'', '\x2', '\x2', 'T', 'U', 
		'\a', '\'', '\x2', '\x2', 'U', 'W', '\a', '\x10', '\x2', '\x2', 'V', 'R', 
		'\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 
		'\xF', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x11', '\x2', '\x2', 
		'Y', ']', '\a', '\'', '\x2', '\x2', 'Z', '[', '\a', '\'', '\x2', '\x2', 
		'[', ']', '\a', '\x11', '\x2', '\x2', '\\', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\b', '\n', '\x1', '\x2', '_', 'n', '\a', '\n', 
		'\x2', '\x2', '`', 'n', '\a', '\f', '\x2', '\x2', '\x61', 'n', '\a', '\v', 
		'\x2', '\x2', '\x62', 'n', '\a', '\'', '\x2', '\x2', '\x63', 'n', '\a', 
		'&', '\x2', '\x2', '\x64', 'n', '\a', '\xE', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\x1A', '\x2', '\x2', '\x66', 'g', '\x5', '\x12', '\n', '\x2', 'g', 
		'h', '\a', '\x1B', '\x2', '\x2', 'h', 'n', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\t', '\x3', '\x2', '\x2', 'j', 'n', '\x5', '\x12', '\n', '\v', 
		'k', 'n', '\x5', '\xE', '\b', '\x2', 'l', 'n', '\x5', '\x10', '\t', '\x2', 
		'm', '^', '\x3', '\x2', '\x2', '\x2', 'm', '`', '\x3', '\x2', '\x2', '\x2', 
		'm', '\x61', '\x3', '\x2', '\x2', '\x2', 'm', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'm', '\x63', '\x3', '\x2', '\x2', '\x2', 'm', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'm', '\x65', '\x3', '\x2', '\x2', '\x2', 'm', 'i', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\x83', '\x3', '\x2', '\x2', '\x2', 'o', 'p', 
		'\f', '\b', '\x2', '\x2', 'p', 'q', '\t', '\x4', '\x2', '\x2', 'q', '\x82', 
		'\x5', '\x12', '\n', '\t', 'r', 's', '\f', '\a', '\x2', '\x2', 's', 't', 
		'\t', '\x5', '\x2', '\x2', 't', '\x82', '\x5', '\x12', '\n', '\b', 'u', 
		'v', '\f', '\x6', '\x2', '\x2', 'v', 'w', '\t', '\x6', '\x2', '\x2', 'w', 
		'\x82', '\x5', '\x12', '\n', '\a', 'x', 'y', '\f', '\x5', '\x2', '\x2', 
		'y', 'z', '\t', '\a', '\x2', '\x2', 'z', '\x82', '\x5', '\x12', '\n', 
		'\x6', '{', '|', '\f', '\x4', '\x2', '\x2', '|', '}', '\a', '\x12', '\x2', 
		'\x2', '}', '\x82', '\x5', '\x12', '\n', '\x5', '~', '\x7F', '\f', '\x3', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x13', '\x2', '\x2', '\x80', '\x82', 
		'\x5', '\x12', '\n', '\x4', '\x81', 'o', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x81', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x81', 'x', '\x3', '\x2', '\x2', '\x2', '\x81', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '~', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\xF', '\x16', '\x18', 
		'\x1F', '$', '/', '\x35', 'K', 'P', 'V', '\\', 'm', '\x81', '\x83',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
