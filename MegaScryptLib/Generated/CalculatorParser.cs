//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, Number=19, True=20, False=21, Var=22, Null=23, Not=24, Increment=25, 
		Decrement=26, And=27, Or=28, Dot=29, Plus=30, Minus=31, Multiply=32, Divide=33, 
		Modulo=34, LeftParenthesis=35, RightParenthesis=36, LeftBracket=37, RightBracket=38, 
		Greater=39, Less=40, GreaterEqual=41, LessEqual=42, Equal=43, NotEqual=44, 
		AddAss=45, MinusAss=46, MultiplyAss=47, DivideAss=48, String=49, Id=50, 
		WhiteSpaces=51;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_loopStmt = 3, 
		RULE_declaration = 4, RULE_funcDeclaration = 5, RULE_varList = 6, RULE_fieldDeclaration = 7, 
		RULE_array = 8, RULE_object = 9, RULE_assignment = 10, RULE_forAssign = 11, 
		RULE_paramList = 12, RULE_ifStmt = 13, RULE_forStmt = 14, RULE_whileStmt = 15, 
		RULE_doWhileStmt = 16, RULE_foreachStmt = 17, RULE_retStmt = 18, RULE_breakStmt = 19, 
		RULE_continueStmt = 20, RULE_incrementExpr = 21, RULE_decrementExpr = 22, 
		RULE_expression = 23, RULE_invocation = 24;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "loopStmt", "declaration", "funcDeclaration", 
		"varList", "fieldDeclaration", "array", "object", "assignment", "forAssign", 
		"paramList", "ifStmt", "forStmt", "whileStmt", "doWhileStmt", "foreachStmt", 
		"retStmt", "breakStmt", "continueStmt", "incrementExpr", "decrementExpr", 
		"expression", "invocation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'function'", "','", "':'", "'if'", 
		"'else if'", "'else'", "'for'", "'while'", "'do'", "'foreach'", "'in'", 
		"'return'", "'break'", "'continue'", null, "'true'", "'false'", "'var'", 
		"'null'", "'!'", "'++'", "'--'", "'&&'", "'||'", "'.'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'('", "')'", "'['", "']'", "'>'", "'<'", "'>='", 
		"'<='", "'=='", "'!='", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "Number", "True", "False", "Var", 
		"Null", "Not", "Increment", "Decrement", "And", "Or", "Dot", "Plus", "Minus", 
		"Multiply", "Divide", "Modulo", "LeftParenthesis", "RightParenthesis", 
		"LeftBracket", "RightBracket", "Greater", "Less", "GreaterEqual", "LessEqual", 
		"Equal", "NotEqual", "AddAss", "MinusAss", "MultiplyAss", "DivideAss", 
		"String", "Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << Number) | (1L << True) | (1L << False) | (1L << Var) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 50; statement();
					}
					break;
				case 2:
					{
					State = 51; block();
					}
					break;
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(T__0);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << Number) | (1L << True) | (1L << False) | (1L << Var) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
					{
					{
					State = 58; statement();
					}
					}
					State = 63;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 64; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public RetStmtContext retStmt() {
			return GetRuleContext<RetStmtContext>(0);
		}
		public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		public LoopStmtContext loopStmt() {
			return GetRuleContext<LoopStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; declaration();
				State = 69; Match(T__2);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 72; ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73; incrementExpr();
				State = 74; Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76; decrementExpr();
				State = 77; Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 79; invocation();
				State = 80; Match(T__2);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 82; retStmt();
				State = 83; Match(T__2);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 85; breakStmt();
				State = 86; Match(T__2);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 88; continueStmt();
				State = 89; Match(T__2);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 91; loopStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStmtContext : ParserRuleContext {
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public DoWhileStmtContext doWhileStmt() {
			return GetRuleContext<DoWhileStmtContext>(0);
		}
		public ForeachStmtContext foreachStmt() {
			return GetRuleContext<ForeachStmtContext>(0);
		}
		public LoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStmtContext loopStmt() {
		LoopStmtContext _localctx = new LoopStmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_loopStmt);
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__10:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; forStmt();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; whileStmt();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; doWhileStmt();
				State = 97; Match(T__2);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 99; foreachStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(Var);
			State = 103; Match(Id);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 104; Match(T__3);
				State = 105; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__4);
			State = 109; Match(LeftParenthesis);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 110; varList();
				}
			}

			State = 113; Match(RightParenthesis);
			State = 114; Match(T__0);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << Number) | (1L << True) | (1L << False) | (1L << Var) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				{
				State = 115; statement();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		public ITerminalNode[] Var() { return GetTokens(CalculatorParser.Var); }
		public ITerminalNode Var(int i) {
			return GetToken(CalculatorParser.Var, i);
		}
		public ITerminalNode[] Id() { return GetTokens(CalculatorParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CalculatorParser.Id, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 12, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(Var);
			State = 124; Match(Id);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 125; Match(T__5);
				State = 126; Match(Var);
				State = 127; Match(Id);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(Id);
			State = 134; Match(T__6);
			State = 135; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CalculatorParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CalculatorParser.RightBracket, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 16, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(LeftBracket);
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 138; paramList();
				}
			}

			State = 141; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public FieldDeclarationContext[] fieldDeclaration() {
			return GetRuleContexts<FieldDeclarationContext>();
		}
		public FieldDeclarationContext fieldDeclaration(int i) {
			return GetRuleContext<FieldDeclarationContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 18, RULE_object);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(T__0);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 144; fieldDeclaration();
					State = 145; Match(T__5);
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 152; fieldDeclaration();
			State = 153; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AddAss() { return GetToken(CalculatorParser.AddAss, 0); }
		public ITerminalNode MinusAss() { return GetToken(CalculatorParser.MinusAss, 0); }
		public ITerminalNode MultiplyAss() { return GetToken(CalculatorParser.MultiplyAss, 0); }
		public ITerminalNode DivideAss() { return GetToken(CalculatorParser.DivideAss, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; expression(0);
			State = 156;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << AddAss) | (1L << MinusAss) | (1L << MultiplyAss) | (1L << DivideAss))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 157; expression(0);
			State = 158; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForAssignContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public ForAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForAssignContext forAssign() {
		ForAssignContext _localctx = new ForAssignContext(Context, State);
		EnterRule(_localctx, 22, RULE_forAssign);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; incrementExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162; decrementExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 24, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; expression(0);
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 166; Match(T__5);
				State = 167; expression(0);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(CalculatorParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(CalculatorParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(CalculatorParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(CalculatorParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(T__7);
			State = 174; Match(LeftParenthesis);
			State = 175; expression(0);
			State = 176; Match(RightParenthesis);
			State = 177; block();
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178; Match(T__8);
					State = 179; Match(LeftParenthesis);
					State = 180; expression(0);
					State = 181; Match(RightParenthesis);
					State = 182; block();
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 189; Match(T__9);
				State = 190; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForAssignContext forAssign() {
			return GetRuleContext<ForAssignContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(T__10);
			State = 194; Match(LeftParenthesis);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 195; declaration();
				}
			}

			State = 198; Match(T__2);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 199; expression(0);
				}
			}

			State = 202; Match(T__2);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 203; forAssign();
				}
			}

			State = 206; Match(RightParenthesis);
			State = 207; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(T__11);
			State = 210; Match(LeftParenthesis);
			State = 211; expression(0);
			State = 212; Match(RightParenthesis);
			State = 213; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStmtContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public DoWhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStmtContext doWhileStmt() {
		DoWhileStmtContext _localctx = new DoWhileStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_doWhileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(T__12);
			State = 216; block();
			State = 217; Match(T__11);
			State = 218; Match(LeftParenthesis);
			State = 219; expression(0);
			State = 220; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStmtContext : ParserRuleContext {
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStmtContext foreachStmt() {
		ForeachStmtContext _localctx = new ForeachStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_foreachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(T__13);
			State = 223; Match(LeftParenthesis);
			State = 224; declaration();
			State = 225; Match(T__14);
			State = 226; expression(0);
			State = 227; Match(RightParenthesis);
			State = 228; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RetStmtContext retStmt() {
		RetStmtContext _localctx = new RetStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_retStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(T__15);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 231; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(T__17);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementExprContext : ParserRuleContext {
		public ITerminalNode Increment() { return GetToken(CalculatorParser.Increment, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public IncrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementExprContext incrementExpr() {
		IncrementExprContext _localctx = new IncrementExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_incrementExpr);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Increment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; Match(Increment);
				State = 239; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(Id);
				State = 241; Match(Increment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementExprContext : ParserRuleContext {
		public ITerminalNode Decrement() { return GetToken(CalculatorParser.Decrement, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public DecrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementExprContext decrementExpr() {
		DecrementExprContext _localctx = new DecrementExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_decrementExpr);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decrement:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; Match(Decrement);
				State = 245; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(Id);
				State = 247; Match(Decrement);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode String() { return GetToken(CalculatorParser.String, 0); }
		public ITerminalNode Null() { return GetToken(CalculatorParser.Null, 0); }
		public FuncDeclarationContext funcDeclaration() {
			return GetRuleContext<FuncDeclarationContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public ITerminalNode Dot() { return GetToken(CalculatorParser.Dot, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CalculatorParser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CalculatorParser.RightBracket, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 251; Match(Number);
				}
				break;
			case 2:
				{
				State = 252; Match(False);
				}
				break;
			case 3:
				{
				State = 253; Match(True);
				}
				break;
			case 4:
				{
				State = 254; Match(Id);
				}
				break;
			case 5:
				{
				State = 255; Match(String);
				}
				break;
			case 6:
				{
				State = 256; Match(Null);
				}
				break;
			case 7:
				{
				State = 257; funcDeclaration();
				}
				break;
			case 8:
				{
				State = 258; @object();
				}
				break;
			case 9:
				{
				State = 259; array();
				}
				break;
			case 10:
				{
				State = 260; incrementExpr();
				}
				break;
			case 11:
				{
				State = 261; decrementExpr();
				}
				break;
			case 12:
				{
				State = 262; Match(LeftParenthesis);
				State = 263; expression(0);
				State = 264; Match(RightParenthesis);
				}
				break;
			case 13:
				{
				State = 266;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Not) | (1L << Plus) | (1L << Minus))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 267; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 302;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 270;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 271; Match(Dot);
						State = 272; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 273;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 274;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 275; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 276;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 277;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 278; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 279;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 280;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 281; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 282;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 283;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 284; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 286; Match(And);
						State = 287; expression(3);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 288;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 289; Match(Or);
						State = 290; expression(2);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 291;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 292; Match(LeftParenthesis);
						State = 294;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
							{
							State = 293; paramList();
							}
						}

						State = 296; Match(RightParenthesis);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 297;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 298; Match(LeftBracket);
						State = 299; expression(0);
						State = 300; Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 48, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; expression(0);
			State = 308; Match(LeftParenthesis);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Number) | (1L << True) | (1L << False) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << LeftBracket) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 309; paramList();
				}
			}

			State = 312; Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x13D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x37', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', ':', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '>', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x41', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x45', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '_', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'g', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'm', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'r', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'w', '\n', '\a', '\f', '\a', '\xE', '\a', 'z', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x83', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x86', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8E', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\x96', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x99', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\xA6', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xAB', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xAE', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xBB', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\xBE', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xC2', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xC7', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xCB', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xCF', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xEB', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF5', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xFB', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x10F', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x129', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\a', '\x19', '\x131', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x134', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x139', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x2', '\x3', '\x30', '\x1B', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x2', '\b', '\x4', '\x2', 
		'\x6', '\x6', '/', '\x32', '\x4', '\x2', '\x1A', '\x1A', ' ', '!', '\x3', 
		'\x2', '\"', '$', '\x3', '\x2', ' ', '!', '\x3', '\x2', ')', ',', '\x3', 
		'\x2', '-', '.', '\x2', '\x15B', '\x2', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x44', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x66', '\x3', '\x2', '\x2', '\x2', '\n', 'h', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'n', '\x3', '\x2', '\x2', '\x2', '\xE', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x87', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x14', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x18', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xD3', '\x3', '\x2', '\x2', '\x2', '\"', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xE0', '\x3', '\x2', '\x2', '\x2', '&', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xEC', '\x3', '\x2', '\x2', '\x2', '*', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xF4', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\x30', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x135', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', '\x5', 
		'\x6', '\x4', '\x2', '\x35', '\x37', '\x5', '\x4', '\x3', '\x2', '\x36', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '?', '\a', '\x3', '\x2', '\x2', '<', '>', '\x5', '\x6', '\x4', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x45', '\a', '\x4', '\x2', '\x2', '\x43', '\x45', 
		'\x5', '\x6', '\x4', '\x2', '\x44', ';', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x5', '\n', '\x6', '\x2', 'G', 'H', '\a', '\x5', 
		'\x2', '\x2', 'H', '_', '\x3', '\x2', '\x2', '\x2', 'I', '_', '\x5', '\x16', 
		'\f', '\x2', 'J', '_', '\x5', '\x1C', '\xF', '\x2', 'K', 'L', '\x5', ',', 
		'\x17', '\x2', 'L', 'M', '\a', '\x5', '\x2', '\x2', 'M', '_', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\x5', '.', '\x18', '\x2', 'O', 'P', '\a', '\x5', 
		'\x2', '\x2', 'P', '_', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x5', '\x32', 
		'\x1A', '\x2', 'R', 'S', '\a', '\x5', '\x2', '\x2', 'S', '_', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'U', '\x5', '&', '\x14', '\x2', 'U', 'V', '\a', '\x5', 
		'\x2', '\x2', 'V', '_', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', '(', 
		'\x15', '\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 'Y', '_', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\x5', '*', '\x16', '\x2', '[', '\\', '\a', '\x5', 
		'\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x5', 
		'\b', '\x5', '\x2', '^', '\x46', '\x3', '\x2', '\x2', '\x2', '^', 'I', 
		'\x3', '\x2', '\x2', '\x2', '^', 'J', '\x3', '\x2', '\x2', '\x2', '^', 
		'K', '\x3', '\x2', '\x2', '\x2', '^', 'N', '\x3', '\x2', '\x2', '\x2', 
		'^', 'Q', '\x3', '\x2', '\x2', '\x2', '^', 'T', '\x3', '\x2', '\x2', '\x2', 
		'^', 'W', '\x3', '\x2', '\x2', '\x2', '^', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\a', '\x3', '\x2', '\x2', 
		'\x2', '`', 'g', '\x5', '\x1E', '\x10', '\x2', '\x61', 'g', '\x5', ' ', 
		'\x11', '\x2', '\x62', '\x63', '\x5', '\"', '\x12', '\x2', '\x63', '\x64', 
		'\a', '\x5', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'g', '\x5', '$', '\x13', '\x2', '\x66', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x61', '\x3', '\x2', '\x2', '\x2', '\x66', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\a', '\x18', '\x2', '\x2', 'i', 'l', '\a', 
		'\x34', '\x2', '\x2', 'j', 'k', '\a', '\x6', '\x2', '\x2', 'k', 'm', '\x5', 
		'\x30', '\x19', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', 
		'\x3', '\x2', '\x2', '\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 
		'o', '\a', '\a', '\x2', '\x2', 'o', 'q', '\a', '%', '\x2', '\x2', 'p', 
		'r', '\x5', '\xE', '\b', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\a', '&', '\x2', '\x2', 't', 'x', '\a', '\x3', '\x2', '\x2', 
		'u', 'w', '\x5', '\x6', '\x4', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 
		'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 
		'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x4', '\x2', '\x2', 
		'|', '\r', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x18', '\x2', 
		'\x2', '~', '\x84', '\a', '\x34', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\b', '\x2', '\x2', '\x80', '\x81', '\a', '\x18', '\x2', '\x2', '\x81', 
		'\x83', '\a', '\x34', '\x2', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x34', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\t', '\x2', '\x2', '\x89', '\x8A', '\x5', '\x30', '\x19', '\x2', '\x8A', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\a', '\'', '\x2', 
		'\x2', '\x8C', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8D', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '(', '\x2', 
		'\x2', '\x90', '\x13', '\x3', '\x2', '\x2', '\x2', '\x91', '\x97', '\a', 
		'\x3', '\x2', '\x2', '\x92', '\x93', '\x5', '\x10', '\t', '\x2', '\x93', 
		'\x94', '\a', '\b', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x92', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		'\x10', '\t', '\x2', '\x9B', '\x9C', '\a', '\x4', '\x2', '\x2', '\x9C', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x30', '\x19', 
		'\x2', '\x9E', '\x9F', '\t', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', 
		'\x30', '\x19', '\x2', '\xA0', '\xA1', '\a', '\x5', '\x2', '\x2', '\xA1', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA6', '\x5', '\x16', '\f', 
		'\x2', '\xA3', '\xA6', '\x5', ',', '\x17', '\x2', '\xA4', '\xA6', '\x5', 
		'.', '\x18', '\x2', '\xA5', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAC', '\x5', 
		'\x30', '\x19', '\x2', '\xA8', '\xA9', '\a', '\b', '\x2', '\x2', '\xA9', 
		'\xAB', '\x5', '\x30', '\x19', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\n', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'%', '\x2', '\x2', '\xB1', '\xB2', '\x5', '\x30', '\x19', '\x2', '\xB2', 
		'\xB3', '\a', '&', '\x2', '\x2', '\xB3', '\xBC', '\x5', '\x4', '\x3', 
		'\x2', '\xB4', '\xB5', '\a', '\v', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'%', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x30', '\x19', '\x2', '\xB7', 
		'\xB8', '\a', '&', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\x4', '\x3', 
		'\x2', '\xB9', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\f', '\x2', '\x2', '\xC0', 
		'\xC2', '\x5', '\x4', '\x3', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\r', '\x2', '\x2', '\xC4', 
		'\xC6', '\a', '%', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\n', '\x6', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCA', 
		'\a', '\x5', '\x2', '\x2', '\xC9', '\xCB', '\x5', '\x30', '\x19', '\x2', 
		'\xCA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCE', 
		'\a', '\x5', '\x2', '\x2', '\xCD', '\xCF', '\x5', '\x18', '\r', '\x2', 
		'\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\a', '&', '\x2', '\x2', '\xD1', '\xD2', '\x5', '\x4', '\x3', '\x2', '\xD2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\xE', '\x2', 
		'\x2', '\xD4', '\xD5', '\a', '%', '\x2', '\x2', '\xD5', '\xD6', '\x5', 
		'\x30', '\x19', '\x2', '\xD6', '\xD7', '\a', '&', '\x2', '\x2', '\xD7', 
		'\xD8', '\x5', '\x4', '\x3', '\x2', '\xD8', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\xF', '\x2', '\x2', '\xDA', '\xDB', '\x5', 
		'\x4', '\x3', '\x2', '\xDB', '\xDC', '\a', '\xE', '\x2', '\x2', '\xDC', 
		'\xDD', '\a', '%', '\x2', '\x2', '\xDD', '\xDE', '\x5', '\x30', '\x19', 
		'\x2', '\xDE', '\xDF', '\a', '&', '\x2', '\x2', '\xDF', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x10', '\x2', '\x2', '\xE1', '\xE2', 
		'\a', '%', '\x2', '\x2', '\xE2', '\xE3', '\x5', '\n', '\x6', '\x2', '\xE3', 
		'\xE4', '\a', '\x11', '\x2', '\x2', '\xE4', '\xE5', '\x5', '\x30', '\x19', 
		'\x2', '\xE5', '\xE6', '\a', '&', '\x2', '\x2', '\xE6', '\xE7', '\x5', 
		'\x4', '\x3', '\x2', '\xE7', '%', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEA', '\a', '\x12', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\x30', '\x19', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\'', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '\x13', '\x2', '\x2', '\xED', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEF', '\a', '\x14', '\x2', '\x2', '\xEF', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '\x1B', '\x2', '\x2', '\xF1', 
		'\xF5', '\a', '\x34', '\x2', '\x2', '\xF2', '\xF3', '\a', '\x34', '\x2', 
		'\x2', '\xF3', '\xF5', '\a', '\x1B', '\x2', '\x2', '\xF4', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'-', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x1C', '\x2', 
		'\x2', '\xF7', '\xFB', '\a', '\x34', '\x2', '\x2', '\xF8', '\xF9', '\a', 
		'\x34', '\x2', '\x2', '\xF9', '\xFB', '\a', '\x1C', '\x2', '\x2', '\xFA', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '/', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\b', 
		'\x19', '\x1', '\x2', '\xFD', '\x10F', '\a', '\x15', '\x2', '\x2', '\xFE', 
		'\x10F', '\a', '\x17', '\x2', '\x2', '\xFF', '\x10F', '\a', '\x16', '\x2', 
		'\x2', '\x100', '\x10F', '\a', '\x34', '\x2', '\x2', '\x101', '\x10F', 
		'\a', '\x33', '\x2', '\x2', '\x102', '\x10F', '\a', '\x19', '\x2', '\x2', 
		'\x103', '\x10F', '\x5', '\f', '\a', '\x2', '\x104', '\x10F', '\x5', '\x14', 
		'\v', '\x2', '\x105', '\x10F', '\x5', '\x12', '\n', '\x2', '\x106', '\x10F', 
		'\x5', ',', '\x17', '\x2', '\x107', '\x10F', '\x5', '.', '\x18', '\x2', 
		'\x108', '\x109', '\a', '%', '\x2', '\x2', '\x109', '\x10A', '\x5', '\x30', 
		'\x19', '\x2', '\x10A', '\x10B', '\a', '&', '\x2', '\x2', '\x10B', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\t', '\x3', '\x2', '\x2', 
		'\x10D', '\x10F', '\x5', '\x30', '\x19', '\t', '\x10E', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x101', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x104', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x106', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\f', '\f', '\x2', '\x2', 
		'\x111', '\x112', '\a', '\x1F', '\x2', '\x2', '\x112', '\x131', '\x5', 
		'\x30', '\x19', '\r', '\x113', '\x114', '\f', '\b', '\x2', '\x2', '\x114', 
		'\x115', '\t', '\x4', '\x2', '\x2', '\x115', '\x131', '\x5', '\x30', '\x19', 
		'\t', '\x116', '\x117', '\f', '\a', '\x2', '\x2', '\x117', '\x118', '\t', 
		'\x5', '\x2', '\x2', '\x118', '\x131', '\x5', '\x30', '\x19', '\b', '\x119', 
		'\x11A', '\f', '\x6', '\x2', '\x2', '\x11A', '\x11B', '\t', '\x6', '\x2', 
		'\x2', '\x11B', '\x131', '\x5', '\x30', '\x19', '\a', '\x11C', '\x11D', 
		'\f', '\x5', '\x2', '\x2', '\x11D', '\x11E', '\t', '\a', '\x2', '\x2', 
		'\x11E', '\x131', '\x5', '\x30', '\x19', '\x6', '\x11F', '\x120', '\f', 
		'\x4', '\x2', '\x2', '\x120', '\x121', '\a', '\x1D', '\x2', '\x2', '\x121', 
		'\x131', '\x5', '\x30', '\x19', '\x5', '\x122', '\x123', '\f', '\x3', 
		'\x2', '\x2', '\x123', '\x124', '\a', '\x1E', '\x2', '\x2', '\x124', '\x131', 
		'\x5', '\x30', '\x19', '\x4', '\x125', '\x126', '\f', '\v', '\x2', '\x2', 
		'\x126', '\x128', '\a', '%', '\x2', '\x2', '\x127', '\x129', '\x5', '\x1A', 
		'\xE', '\x2', '\x128', '\x127', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x131', '\a', '&', '\x2', '\x2', '\x12B', '\x12C', '\f', '\n', 
		'\x2', '\x2', '\x12C', '\x12D', '\a', '\'', '\x2', '\x2', '\x12D', '\x12E', 
		'\x5', '\x30', '\x19', '\x2', '\x12E', '\x12F', '\a', '(', '\x2', '\x2', 
		'\x12F', '\x131', '\x3', '\x2', '\x2', '\x2', '\x130', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x113', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x130', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x130', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x125', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x134', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x31', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x5', '\x30', '\x19', '\x2', 
		'\x136', '\x138', '\a', '%', '\x2', '\x2', '\x137', '\x139', '\x5', '\x1A', 
		'\xE', '\x2', '\x138', '\x137', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x13B', '\a', '&', '\x2', '\x2', '\x13B', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x36', '\x38', '?', '\x44', '^', '\x66', 'l', 'q', 
		'x', '\x84', '\x8D', '\x97', '\xA5', '\xAC', '\xBC', '\xC1', '\xC6', '\xCA', 
		'\xCE', '\xEA', '\xF4', '\xFA', '\x10E', '\x128', '\x130', '\x132', '\x138',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
