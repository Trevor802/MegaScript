//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		Number=10, True=11, False=12, Var=13, Null=14, Not=15, Increment=16, Decrement=17, 
		And=18, Or=19, Dot=20, Plus=21, Minus=22, Multiply=23, Divide=24, Modulo=25, 
		LeftParenthesis=26, RightParenthesis=27, Greater=28, Less=29, GreaterEqual=30, 
		LessEqual=31, Equal=32, NotEqual=33, AddAss=34, MinusAss=35, MultiplyAss=36, 
		DivideAss=37, String=38, Id=39, WhiteSpaces=40;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_fieldDeclaration = 4, RULE_object = 5, RULE_assignment = 6, RULE_ifStmt = 7, 
		RULE_incrementExpr = 8, RULE_decrementExpr = 9, RULE_expression = 10;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "declaration", "fieldDeclaration", "object", 
		"assignment", "ifStmt", "incrementExpr", "decrementExpr", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "':'", "','", "'if'", "'else if'", "'else'", 
		null, "'true'", "'false'", "'var'", "'null'", "'!'", "'++'", "'--'", "'&&'", 
		"'||'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='", "'+='", "'-='", "'*='", "'/='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "Number", 
		"True", "False", "Var", "Null", "Not", "Increment", "Decrement", "And", 
		"Or", "Dot", "Plus", "Minus", "Multiply", "Divide", "Modulo", "LeftParenthesis", 
		"RightParenthesis", "Greater", "Less", "GreaterEqual", "LessEqual", "Equal", 
		"NotEqual", "AddAss", "MinusAss", "MultiplyAss", "DivideAss", "String", 
		"Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__6) | (1L << Number) | (1L << True) | (1L << False) | (1L << Var) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << String) | (1L << Id))) != 0)) {
				{
				State = 24;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 22; statement();
					}
					break;
				case 2:
					{
					State = 23; block();
					}
					break;
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(T__0);
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__6) | (1L << Number) | (1L << True) | (1L << False) | (1L << Var) | (1L << Null) | (1L << Not) | (1L << Increment) | (1L << Decrement) | (1L << Plus) | (1L << Minus) | (1L << LeftParenthesis) | (1L << String) | (1L << Id))) != 0)) {
					{
					{
					State = 30; statement();
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 36; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; ifStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43; incrementExpr();
				State = 44; Match(T__2);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 46; decrementExpr();
				State = 47; Match(T__2);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 49; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(Var);
			State = 53; Match(Id);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 54; Match(T__3);
				State = 55; expression(0);
				}
			}

			State = 58; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(Id);
			State = 61; Match(T__4);
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 62; expression(0);
				}
				break;
			case 2:
				{
				State = 63; @object();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public FieldDeclarationContext[] fieldDeclaration() {
			return GetRuleContexts<FieldDeclarationContext>();
		}
		public FieldDeclarationContext fieldDeclaration(int i) {
			return GetRuleContext<FieldDeclarationContext>(i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 10, RULE_object);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(T__0);
			State = 72;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 67; fieldDeclaration();
					State = 68; Match(T__5);
					}
					} 
				}
				State = 74;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 75; fieldDeclaration();
			State = 76; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AddAss() { return GetToken(CalculatorParser.AddAss, 0); }
		public ITerminalNode MinusAss() { return GetToken(CalculatorParser.MinusAss, 0); }
		public ITerminalNode MultiplyAss() { return GetToken(CalculatorParser.MultiplyAss, 0); }
		public ITerminalNode DivideAss() { return GetToken(CalculatorParser.DivideAss, 0); }
		public ITerminalNode[] Id() { return GetTokens(CalculatorParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(CalculatorParser.Id, i);
		}
		public ITerminalNode[] Dot() { return GetTokens(CalculatorParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(CalculatorParser.Dot, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 78; Match(Id);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Dot) {
				{
				{
				State = 79; Match(Dot);
				State = 80; Match(Id);
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 86;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << AddAss) | (1L << MinusAss) | (1L << MultiplyAss) | (1L << DivideAss))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 87; expression(0);
			State = 88; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(CalculatorParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(CalculatorParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(CalculatorParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(CalculatorParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(T__6);
			State = 91; Match(LeftParenthesis);
			State = 92; expression(0);
			State = 93; Match(RightParenthesis);
			State = 94; block();
			State = 103;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 95; Match(T__7);
					State = 96; Match(LeftParenthesis);
					State = 97; expression(0);
					State = 98; Match(RightParenthesis);
					State = 99; block();
					}
					} 
				}
				State = 105;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 106; Match(T__8);
				State = 107; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementExprContext : ParserRuleContext {
		public ITerminalNode Increment() { return GetToken(CalculatorParser.Increment, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public IncrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementExprContext incrementExpr() {
		IncrementExprContext _localctx = new IncrementExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_incrementExpr);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Increment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(Increment);
				State = 111; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; Match(Id);
				State = 113; Match(Increment);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementExprContext : ParserRuleContext {
		public ITerminalNode Decrement() { return GetToken(CalculatorParser.Decrement, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public DecrementExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrementExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementExprContext decrementExpr() {
		DecrementExprContext _localctx = new DecrementExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_decrementExpr);
		try {
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decrement:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; Match(Decrement);
				State = 117; Match(Id);
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118; Match(Id);
				State = 119; Match(Decrement);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode String() { return GetToken(CalculatorParser.String, 0); }
		public ITerminalNode Null() { return GetToken(CalculatorParser.Null, 0); }
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public IncrementExprContext incrementExpr() {
			return GetRuleContext<IncrementExprContext>(0);
		}
		public DecrementExprContext decrementExpr() {
			return GetRuleContext<DecrementExprContext>(0);
		}
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public ITerminalNode Dot() { return GetToken(CalculatorParser.Dot, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 123; Match(Number);
				}
				break;
			case 2:
				{
				State = 124; Match(False);
				}
				break;
			case 3:
				{
				State = 125; Match(True);
				}
				break;
			case 4:
				{
				State = 126; Match(Id);
				}
				break;
			case 5:
				{
				State = 127; Match(String);
				}
				break;
			case 6:
				{
				State = 128; Match(Null);
				}
				break;
			case 7:
				{
				State = 129; @object();
				}
				break;
			case 8:
				{
				State = 130; incrementExpr();
				}
				break;
			case 9:
				{
				State = 131; decrementExpr();
				}
				break;
			case 10:
				{
				State = 132; Match(LeftParenthesis);
				State = 133; expression(0);
				State = 134; Match(RightParenthesis);
				}
				break;
			case 11:
				{
				State = 136;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Not) | (1L << Plus) | (1L << Minus))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 137; expression(7);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 161;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 141; Match(Dot);
						State = 142; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 144;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 145; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 147;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 148; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 150;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 151; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 153;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 154; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 156; Match(And);
						State = 157; expression(3);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 159; Match(Or);
						State = 160; expression(2);
						}
						break;
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\xA9', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1B', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1E', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\"', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'%', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ')', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ';', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x43', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'I', '\n', '\a', '\f', '\a', '\xE', '\a', 'L', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', 'T', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'W', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', 'h', '\n', '\t', '\f', '\t', '\xE', '\t', 'k', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'o', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'u', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '{', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8D', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\a', '\f', '\xA4', '\n', '\f', '\f', '\f', '\xE', '\f', '\xA7', '\v', 
		'\f', '\x3', '\f', '\x2', '\x3', '\x16', '\r', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x2', '\b', '\x4', 
		'\x2', '\x6', '\x6', '$', '\'', '\x4', '\x2', '\x11', '\x11', '\x17', 
		'\x18', '\x3', '\x2', '\x19', '\x1B', '\x3', '\x2', '\x17', '\x18', '\x3', 
		'\x2', '\x1E', '!', '\x3', '\x2', '\"', '#', '\x2', '\xBF', '\x2', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\n', '>', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'P', '\x3', '\x2', '\x2', '\x2', '\x10', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 't', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1B', '\x5', '\x6', '\x4', '\x2', '\x19', '\x1B', '\x5', 
		'\x4', '\x3', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', '#', '\a', '\x3', '\x2', '\x2', 
		' ', '\"', '\x5', '\x6', '\x4', '\x2', '!', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x3', '\x2', 
		'\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\a', '\x4', 
		'\x2', '\x2', '\'', ')', '\x5', '\x6', '\x4', '\x2', '(', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x35', '\x5', '\b', '\x5', '\x2', '+', 
		'\x35', '\x5', '\xE', '\b', '\x2', ',', '\x35', '\x5', '\x10', '\t', '\x2', 
		'-', '.', '\x5', '\x12', '\n', '\x2', '.', '/', '\a', '\x5', '\x2', '\x2', 
		'/', '\x35', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x5', '\x14', 
		'\v', '\x2', '\x31', '\x32', '\a', '\x5', '\x2', '\x2', '\x32', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x5', '\x16', '\f', '\x2', 
		'\x34', '*', '\x3', '\x2', '\x2', '\x2', '\x34', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x34', ',', '\x3', '\x2', '\x2', '\x2', '\x34', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x30', '\x3', '\x2', '\x2', '\x2', '\x34', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\a', '\xF', '\x2', '\x2', '\x37', ':', '\a', ')', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', '\x39', ';', '\x5', 
		'\x16', '\f', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '\x5', '\x2', '\x2', '=', '\t', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', ')', '\x2', '\x2', '?', '\x42', '\a', '\a', '\x2', '\x2', 
		'@', '\x43', '\x5', '\x16', '\f', '\x2', '\x41', '\x43', '\x5', '\f', 
		'\a', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'J', '\a', '\x3', '\x2', '\x2', '\x45', '\x46', '\x5', '\n', '\x6', 
		'\x2', '\x46', 'G', '\a', '\b', '\x2', '\x2', 'G', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x45', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x5', '\n', '\x6', '\x2', 'N', 'O', '\a', 
		'\x4', '\x2', '\x2', 'O', '\r', '\x3', '\x2', '\x2', '\x2', 'P', 'U', 
		'\a', ')', '\x2', '\x2', 'Q', 'R', '\a', '\x16', '\x2', '\x2', 'R', 'T', 
		'\a', ')', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'W', 
		'\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 
		'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\t', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\x5', '\x16', '\f', '\x2', 'Z', '[', '\a', '\x5', '\x2', '\x2', 
		'[', '\xF', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', 
		'\x2', ']', '^', '\a', '\x1C', '\x2', '\x2', '^', '_', '\x5', '\x16', 
		'\f', '\x2', '_', '`', '\a', '\x1D', '\x2', '\x2', '`', 'i', '\x5', '\x4', 
		'\x3', '\x2', '\x61', '\x62', '\a', '\n', '\x2', '\x2', '\x62', '\x63', 
		'\a', '\x1C', '\x2', '\x2', '\x63', '\x64', '\x5', '\x16', '\f', '\x2', 
		'\x64', '\x65', '\a', '\x1D', '\x2', '\x2', '\x65', '\x66', '\x5', '\x4', 
		'\x3', '\x2', '\x66', 'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'k', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', 
		'\v', '\x2', '\x2', 'm', 'o', '\x5', '\x4', '\x3', '\x2', 'n', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x12', '\x2', '\x2', 'q', 
		'u', '\a', ')', '\x2', '\x2', 'r', 's', '\a', ')', '\x2', '\x2', 's', 
		'u', '\a', '\x12', '\x2', '\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '\x13', '\x2', '\x2', 'w', '{', '\a', ')', '\x2', 
		'\x2', 'x', 'y', '\a', ')', '\x2', '\x2', 'y', '{', '\a', '\x13', '\x2', 
		'\x2', 'z', 'v', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', '{', '\x15', '\x3', '\x2', '\x2', '\x2', '|', '}', '\b', '\f', 
		'\x1', '\x2', '}', '\x8D', '\a', '\f', '\x2', '\x2', '~', '\x8D', '\a', 
		'\xE', '\x2', '\x2', '\x7F', '\x8D', '\a', '\r', '\x2', '\x2', '\x80', 
		'\x8D', '\a', ')', '\x2', '\x2', '\x81', '\x8D', '\a', '(', '\x2', '\x2', 
		'\x82', '\x8D', '\a', '\x10', '\x2', '\x2', '\x83', '\x8D', '\x5', '\f', 
		'\a', '\x2', '\x84', '\x8D', '\x5', '\x12', '\n', '\x2', '\x85', '\x8D', 
		'\x5', '\x14', '\v', '\x2', '\x86', '\x87', '\a', '\x1C', '\x2', '\x2', 
		'\x87', '\x88', '\x5', '\x16', '\f', '\x2', '\x88', '\x89', '\a', '\x1D', 
		'\x2', '\x2', '\x89', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\t', '\x3', '\x2', '\x2', '\x8B', '\x8D', '\x5', '\x16', '\f', '\t', 
		'\x8C', '|', '\x3', '\x2', '\x2', '\x2', '\x8C', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8F', '\f', '\n', '\x2', '\x2', '\x8F', '\x90', '\a', 
		'\x16', '\x2', '\x2', '\x90', '\xA4', '\x5', '\x16', '\f', '\v', '\x91', 
		'\x92', '\f', '\b', '\x2', '\x2', '\x92', '\x93', '\t', '\x4', '\x2', 
		'\x2', '\x93', '\xA4', '\x5', '\x16', '\f', '\t', '\x94', '\x95', '\f', 
		'\a', '\x2', '\x2', '\x95', '\x96', '\t', '\x5', '\x2', '\x2', '\x96', 
		'\xA4', '\x5', '\x16', '\f', '\b', '\x97', '\x98', '\f', '\x6', '\x2', 
		'\x2', '\x98', '\x99', '\t', '\x6', '\x2', '\x2', '\x99', '\xA4', '\x5', 
		'\x16', '\f', '\a', '\x9A', '\x9B', '\f', '\x5', '\x2', '\x2', '\x9B', 
		'\x9C', '\t', '\a', '\x2', '\x2', '\x9C', '\xA4', '\x5', '\x16', '\f', 
		'\x6', '\x9D', '\x9E', '\f', '\x4', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x14', '\x2', '\x2', '\x9F', '\xA4', '\x5', '\x16', '\f', '\x5', '\xA0', 
		'\xA1', '\f', '\x3', '\x2', '\x2', '\xA1', '\xA2', '\a', '\x15', '\x2', 
		'\x2', '\xA2', '\xA4', '\x5', '\x16', '\f', '\x4', '\xA3', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA3', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x1A', '\x1C', '#', '(', '\x34', ':', '\x42', 'J', 'U', 'i', 'n', 't', 
		'z', '\x8C', '\xA3', '\xA5',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
