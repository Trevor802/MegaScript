//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, Number=8, True=9, 
		False=10, Var=11, Not=12, And=13, Or=14, Dot=15, Plus=16, Minus=17, Multiply=18, 
		Divide=19, Modulo=20, LeftParenthesis=21, RightParenthesis=22, Greater=23, 
		Less=24, GreaterEqual=25, LessEqual=26, Equal=27, NotEqual=28, Id=29, 
		WhiteSpaces=30;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_declaration = 3, 
		RULE_assignment = 4, RULE_ifStmt = 5, RULE_expression = 6;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "declaration", "assignment", "ifStmt", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'='", "';'", "'if'", "'else if'", "'else'", null, 
		"'true'", "'false'", "'var'", "'!'", "'&&'", "'||'", "'.'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'('", "')'", "'>'", "'<'", "'>='", "'<='", "'=='", 
		"'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "Number", "True", "False", 
		"Var", "Not", "And", "Or", "Dot", "Plus", "Minus", "Multiply", "Divide", 
		"Modulo", "LeftParenthesis", "RightParenthesis", "Greater", "Less", "GreaterEqual", 
		"LessEqual", "Equal", "NotEqual", "Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << Var) | (1L << Id))) != 0)) {
				{
				State = 16;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 14; statement();
					}
					break;
				case 2:
					{
					State = 15; block();
					}
					break;
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; Match(T__0);
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << Var) | (1L << Id))) != 0)) {
					{
					{
					State = 22; statement();
					}
					}
					State = 27;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 28; Match(T__1);
				}
				break;
			case T__4:
			case Var:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 35;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32; declaration();
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; assignment();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34; ifStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(Var);
			State = 38; Match(Id);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 39; Match(T__2);
				State = 40; expression(0);
				}
			}

			State = 43; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(Id);
			State = 46; Match(T__2);
			State = 47; expression(0);
			State = 48; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode[] LeftParenthesis() { return GetTokens(CalculatorParser.LeftParenthesis); }
		public ITerminalNode LeftParenthesis(int i) {
			return GetToken(CalculatorParser.LeftParenthesis, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RightParenthesis() { return GetTokens(CalculatorParser.RightParenthesis); }
		public ITerminalNode RightParenthesis(int i) {
			return GetToken(CalculatorParser.RightParenthesis, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_ifStmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(T__4);
			State = 51; Match(LeftParenthesis);
			State = 52; expression(0);
			State = 53; Match(RightParenthesis);
			State = 54; block();
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 55; Match(T__5);
					State = 56; Match(LeftParenthesis);
					State = 57; expression(0);
					State = 58; Match(RightParenthesis);
					State = 59; block();
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 66; Match(T__6);
				State = 67; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				{
				State = 71; Match(Number);
				}
				break;
			case False:
				{
				State = 72; Match(False);
				}
				break;
			case True:
				{
				State = 73; Match(True);
				}
				break;
			case Id:
				{
				State = 74; Match(Id);
				}
				break;
			case LeftParenthesis:
				{
				State = 75; Match(LeftParenthesis);
				State = 76; expression(0);
				State = 77; Match(RightParenthesis);
				}
				break;
			case Minus:
				{
				State = 79; Match(Minus);
				State = 80; expression(8);
				}
				break;
			case Not:
				{
				State = 81; Match(Not);
				State = 82; expression(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 85;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 86;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 87; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 88;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 89;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 90; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 91;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 92;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 93; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 94;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 95;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 96; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 98; Match(And);
						State = 99; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 101; Match(Or);
						State = 102; expression(2);
						}
						break;
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', 'o', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\x13', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\x16', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1A', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '!', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '&', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ',', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '@', '\n', '\a', '\f', '\a', '\xE', '\a', '\x43', 
		'\v', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', 'V', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', 'j', '\n', '\b', '\f', '\b', '\xE', '\b', 'm', '\v', '\b', '\x3', 
		'\b', '\x2', '\x3', '\xE', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x2', '\x6', '\x3', '\x2', '\x14', '\x16', '\x3', '\x2', '\x12', 
		'\x13', '\x3', '\x2', '\x19', '\x1C', '\x3', '\x2', '\x1D', '\x1E', '\x2', 
		'|', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '%', '\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\n', '/', '\x3', '\x2', '\x2', '\x2', '\f', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'U', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x13', '\x5', '\x6', '\x4', '\x2', '\x11', '\x13', '\x5', '\x4', '\x3', 
		'\x2', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x1B', '\a', '\x3', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\x6', '\x4', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '!', '\a', '\x4', '\x2', '\x2', '\x1F', '!', '\x5', '\x6', 
		'\x4', '\x2', ' ', '\x17', '\x3', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x5', '\x3', '\x2', '\x2', '\x2', '\"', '&', 
		'\x5', '\b', '\x5', '\x2', '#', '&', '\x5', '\n', '\x6', '\x2', '$', '&', 
		'\x5', '\f', '\a', '\x2', '%', '\"', '\x3', '\x2', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '%', '$', '\x3', '\x2', '\x2', '\x2', 
		'&', '\a', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\r', '\x2', '\x2', 
		'(', '+', '\a', '\x1F', '\x2', '\x2', ')', '*', '\a', '\x5', '\x2', '\x2', 
		'*', ',', '\x5', '\xE', '\b', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\a', '\x6', '\x2', '\x2', '.', '\t', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\a', '\x1F', '\x2', '\x2', '\x30', '\x31', '\a', '\x5', 
		'\x2', '\x2', '\x31', '\x32', '\x5', '\xE', '\b', '\x2', '\x32', '\x33', 
		'\a', '\x6', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\a', '\x2', '\x2', '\x35', '\x36', '\a', '\x17', '\x2', 
		'\x2', '\x36', '\x37', '\x5', '\xE', '\b', '\x2', '\x37', '\x38', '\a', 
		'\x18', '\x2', '\x2', '\x38', '\x41', '\x5', '\x4', '\x3', '\x2', '\x39', 
		':', '\a', '\b', '\x2', '\x2', ':', ';', '\a', '\x17', '\x2', '\x2', ';', 
		'<', '\x5', '\xE', '\b', '\x2', '<', '=', '\a', '\x18', '\x2', '\x2', 
		'=', '>', '\x5', '\x4', '\x3', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x39', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x46', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\t', '\x2', 
		'\x2', '\x45', 'G', '\x5', '\x4', '\x3', '\x2', '\x46', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\b', '\b', '\x1', '\x2', 'I', 'V', 
		'\a', '\n', '\x2', '\x2', 'J', 'V', '\a', '\f', '\x2', '\x2', 'K', 'V', 
		'\a', '\v', '\x2', '\x2', 'L', 'V', '\a', '\x1F', '\x2', '\x2', 'M', 'N', 
		'\a', '\x17', '\x2', '\x2', 'N', 'O', '\x5', '\xE', '\b', '\x2', 'O', 
		'P', '\a', '\x18', '\x2', '\x2', 'P', 'V', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\x13', '\x2', '\x2', 'R', 'V', '\x5', '\xE', '\b', '\n', 
		'S', 'T', '\a', '\xE', '\x2', '\x2', 'T', 'V', '\x5', '\xE', '\b', '\t', 
		'U', 'H', '\x3', '\x2', '\x2', '\x2', 'U', 'J', '\x3', '\x2', '\x2', '\x2', 
		'U', 'K', '\x3', '\x2', '\x2', '\x2', 'U', 'L', '\x3', '\x2', '\x2', '\x2', 
		'U', 'M', '\x3', '\x2', '\x2', '\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'U', 'S', '\x3', '\x2', '\x2', '\x2', 'V', 'k', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\f', '\b', '\x2', '\x2', 'X', 'Y', '\t', '\x2', '\x2', '\x2', 
		'Y', 'j', '\x5', '\xE', '\b', '\t', 'Z', '[', '\f', '\a', '\x2', '\x2', 
		'[', '\\', '\t', '\x3', '\x2', '\x2', '\\', 'j', '\x5', '\xE', '\b', '\b', 
		']', '^', '\f', '\x6', '\x2', '\x2', '^', '_', '\t', '\x4', '\x2', '\x2', 
		'_', 'j', '\x5', '\xE', '\b', '\a', '`', '\x61', '\f', '\x5', '\x2', '\x2', 
		'\x61', '\x62', '\t', '\x5', '\x2', '\x2', '\x62', 'j', '\x5', '\xE', 
		'\b', '\x6', '\x63', '\x64', '\f', '\x4', '\x2', '\x2', '\x64', '\x65', 
		'\a', '\xF', '\x2', '\x2', '\x65', 'j', '\x5', '\xE', '\b', '\x5', '\x66', 
		'g', '\f', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\x10', '\x2', '\x2', 
		'h', 'j', '\x5', '\xE', '\b', '\x4', 'i', 'W', '\x3', '\x2', '\x2', '\x2', 
		'i', 'Z', '\x3', '\x2', '\x2', '\x2', 'i', ']', '\x3', '\x2', '\x2', '\x2', 
		'i', '`', '\x3', '\x2', '\x2', '\x2', 'i', '\x63', '\x3', '\x2', '\x2', 
		'\x2', 'i', '\x66', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\xF', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\x12', '\x14', '\x1B', ' ', '%', '+', '\x41', 
		'\x46', 'U', 'i', 'k',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
