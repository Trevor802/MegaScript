//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, Number=3, True=4, False=5, Var=6, Not=7, And=8, Or=9, 
		Dot=10, Plus=11, Minus=12, Multiply=13, Divide=14, Modulo=15, LeftParenthesis=16, 
		RightParenthesis=17, Greater=18, Less=19, GreaterEqual=20, LessEqual=21, 
		Equal=22, NotEqual=23, Id=24, WhiteSpaces=25;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_assignment = 3, 
		RULE_expression = 4;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "assignment", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "';'", null, "'true'", "'false'", "'var'", "'!'", "'&&'", 
		"'||'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", "')'", "'>'", 
		"'<'", "'>='", "'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "Number", "True", "False", "Var", "Not", "And", "Or", 
		"Dot", "Plus", "Minus", "Multiply", "Divide", "Modulo", "LeftParenthesis", 
		"RightParenthesis", "Greater", "Less", "GreaterEqual", "LessEqual", "Equal", 
		"NotEqual", "Id", "WhiteSpaces"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Var || _la==Id) {
				{
				{
				State = 10; statement();
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				{
				State = 16; declaration();
				}
				break;
			case Id:
				{
				State = 17; assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(CalculatorParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; Match(Var);
			State = 21; Match(Id);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 22; Match(T__0);
				State = 23; expression(0);
				}
			}

			State = 26; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(Id);
			State = 29; Match(T__0);
			State = 30; expression(0);
			State = 31; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(CalculatorParser.Number, 0); }
		public ITerminalNode False() { return GetToken(CalculatorParser.False, 0); }
		public ITerminalNode True() { return GetToken(CalculatorParser.True, 0); }
		public ITerminalNode Id() { return GetToken(CalculatorParser.Id, 0); }
		public ITerminalNode LeftParenthesis() { return GetToken(CalculatorParser.LeftParenthesis, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RightParenthesis() { return GetToken(CalculatorParser.RightParenthesis, 0); }
		public ITerminalNode Minus() { return GetToken(CalculatorParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(CalculatorParser.Not, 0); }
		public ITerminalNode Multiply() { return GetToken(CalculatorParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(CalculatorParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(CalculatorParser.Modulo, 0); }
		public ITerminalNode Plus() { return GetToken(CalculatorParser.Plus, 0); }
		public ITerminalNode Less() { return GetToken(CalculatorParser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CalculatorParser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CalculatorParser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CalculatorParser.GreaterEqual, 0); }
		public ITerminalNode Equal() { return GetToken(CalculatorParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CalculatorParser.NotEqual, 0); }
		public ITerminalNode And() { return GetToken(CalculatorParser.And, 0); }
		public ITerminalNode Or() { return GetToken(CalculatorParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				{
				State = 34; Match(Number);
				}
				break;
			case False:
				{
				State = 35; Match(False);
				}
				break;
			case True:
				{
				State = 36; Match(True);
				}
				break;
			case Id:
				{
				State = 37; Match(Id);
				}
				break;
			case LeftParenthesis:
				{
				State = 38; Match(LeftParenthesis);
				State = 39; expression(0);
				State = 40; Match(RightParenthesis);
				}
				break;
			case Minus:
				{
				State = 42; Match(Minus);
				State = 43; expression(8);
				}
				break;
			case Not:
				{
				State = 44; Match(Not);
				State = 45; expression(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 66;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 48;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 49;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 50; expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 51;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 52;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 53; expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 54;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 55;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Greater) | (1L << Less) | (1L << GreaterEqual) | (1L << LessEqual))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 56; expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 57;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 58;
						_la = TokenStream.LA(1);
						if ( !(_la==Equal || _la==NotEqual) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 59; expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 60;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 61; Match(And);
						State = 62; expression(3);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 63;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 64; Match(Or);
						State = 65; expression(2);
						}
						break;
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', 'J', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x15', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x1B', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x31', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x45', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'H', '\v', '\x6', '\x3', 
		'\x6', '\x2', '\x3', '\n', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', 
		'\x6', '\x3', '\x2', '\xF', '\x11', '\x3', '\x2', '\r', '\xE', '\x3', 
		'\x2', '\x14', '\x17', '\x3', '\x2', '\x18', '\x19', '\x2', 'S', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x16', '\x3', '\x2', '\x2', '\x2', '\b', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x30', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', 
		'\x5', '\x4', '\x3', '\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x15', '\x5', '\x6', '\x4', '\x2', '\x13', '\x15', '\x5', '\b', '\x5', 
		'\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x5', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\b', '\x2', '\x2', '\x17', '\x1A', '\a', '\x1A', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x3', '\x2', '\x2', '\x19', '\x1B', '\x5', 
		'\n', '\x6', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\a', '\x4', '\x2', '\x2', '\x1D', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x1A', '\x2', '\x2', '\x1F', 
		' ', '\a', '\x3', '\x2', '\x2', ' ', '!', '\x5', '\n', '\x6', '\x2', '!', 
		'\"', '\a', '\x4', '\x2', '\x2', '\"', '\t', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\b', '\x6', '\x1', '\x2', '$', '\x31', '\a', '\x5', '\x2', 
		'\x2', '%', '\x31', '\a', '\a', '\x2', '\x2', '&', '\x31', '\a', '\x6', 
		'\x2', '\x2', '\'', '\x31', '\a', '\x1A', '\x2', '\x2', '(', ')', '\a', 
		'\x12', '\x2', '\x2', ')', '*', '\x5', '\n', '\x6', '\x2', '*', '+', '\a', 
		'\x13', '\x2', '\x2', '+', '\x31', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\a', '\xE', '\x2', '\x2', '-', '\x31', '\x5', '\n', '\x6', '\n', '.', 
		'/', '\a', '\t', '\x2', '\x2', '/', '\x31', '\x5', '\n', '\x6', '\t', 
		'\x30', '#', '\x3', '\x2', '\x2', '\x2', '\x30', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '&', '\x3', '\x2', '\x2', '\x2', '\x30', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '(', '\x3', '\x2', '\x2', '\x2', '\x30', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\f', '\b', '\x2', 
		'\x2', '\x33', '\x34', '\t', '\x2', '\x2', '\x2', '\x34', '\x45', '\x5', 
		'\n', '\x6', '\t', '\x35', '\x36', '\f', '\a', '\x2', '\x2', '\x36', '\x37', 
		'\t', '\x3', '\x2', '\x2', '\x37', '\x45', '\x5', '\n', '\x6', '\b', '\x38', 
		'\x39', '\f', '\x6', '\x2', '\x2', '\x39', ':', '\t', '\x4', '\x2', '\x2', 
		':', '\x45', '\x5', '\n', '\x6', '\a', ';', '<', '\f', '\x5', '\x2', '\x2', 
		'<', '=', '\t', '\x5', '\x2', '\x2', '=', '\x45', '\x5', '\n', '\x6', 
		'\x6', '>', '?', '\f', '\x4', '\x2', '\x2', '?', '@', '\a', '\n', '\x2', 
		'\x2', '@', '\x45', '\x5', '\n', '\x6', '\x5', '\x41', '\x42', '\f', '\x3', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\v', '\x2', '\x2', '\x43', '\x45', 
		'\x5', '\n', '\x6', '\x4', '\x44', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x35', '\x3', '\x2', '\x2', '\x2', '\x44', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x44', ';', '\x3', '\x2', '\x2', '\x2', '\x44', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', '\b', '\xF', '\x14', 
		'\x1A', '\x30', '\x44', '\x46',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
